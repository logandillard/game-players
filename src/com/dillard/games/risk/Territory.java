package com.dillard.games.risk;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public enum Territory {

	ALASKA(Continent.NORTH_AMERICA),
	ALBERTA(Continent.NORTH_AMERICA),
	CENTRAL_AMERICA(Continent.NORTH_AMERICA),
	EASTERN_UNITED_STATES(Continent.NORTH_AMERICA),
	GREENLAND(Continent.NORTH_AMERICA),
	NORTHWEST_TERRITORY(Continent.NORTH_AMERICA),
	ONTARIO(Continent.NORTH_AMERICA),
	QUEBEC(Continent.NORTH_AMERICA),
	WESTERN_UNITED_STATES(Continent.NORTH_AMERICA),

	ARGENTINA(Continent.SOUTH_AMERICA),
	BRAZIL(Continent.SOUTH_AMERICA),
	PERU(Continent.SOUTH_AMERICA),
	VENEZUELA(Continent.SOUTH_AMERICA),

	GREAT_BRITAIN(Continent.EUROPE),
	ICELAND(Continent.EUROPE),
	NORTHERN_EUROPE(Continent.EUROPE),
	SCANDINAVIA(Continent.EUROPE),
	SOUTHERN_EUROPE(Continent.EUROPE),
	UKRAINE(Continent.EUROPE),
	WESTERN_EUROPE(Continent.EUROPE),

	CONGO(Continent.AFRICA),
	EAST_AFRICA(Continent.AFRICA),
	EGYPT(Continent.AFRICA),
	MADAGASCAR(Continent.AFRICA),
	NORTH_AFRICA(Continent.AFRICA),
	SOUTH_AFRICA(Continent.AFRICA),

	AFGHANISTAN(Continent.ASIA),
	CHINA(Continent.ASIA),
	INDIA(Continent.ASIA),
	IRKUTSK(Continent.ASIA),
	JAPAN(Continent.ASIA),
	KAMCHATKA(Continent.ASIA),
	MIDDLE_EAST(Continent.ASIA),
	MONGOLIA(Continent.ASIA),
	SIAM(Continent.ASIA),
	SIBERIA(Continent.ASIA),
	URAL(Continent.ASIA),
	YAKUTSK(Continent.ASIA),

	EASTERN_AUSTRALIA(Continent.AUSTRALIA),
	INDONESIA(Continent.AUSTRALIA),
	NEW_GUINEA(Continent.AUSTRALIA),
	WESTERN_AUSTRALIA(Continent.AUSTRALIA);

	public static Territory[] VALUES = values();

	public static final int NUM_TERRITORIES = 42;

	static {
		if (VALUES.length != NUM_TERRITORIES) {
			throw new RuntimeException("The code is inconsistent");
		}

		ALASKA.at(ALBERTA, NORTHWEST_TERRITORY, KAMCHATKA);
		ALBERTA.at(NORTHWEST_TERRITORY, ALASKA, ONTARIO, WESTERN_UNITED_STATES);
		CENTRAL_AMERICA.at(EASTERN_UNITED_STATES, WESTERN_UNITED_STATES, VENEZUELA);
		EASTERN_UNITED_STATES.at(WESTERN_UNITED_STATES, ONTARIO, QUEBEC, CENTRAL_AMERICA);
		GREENLAND.at(NORTHWEST_TERRITORY, ONTARIO, QUEBEC, ICELAND);
		NORTHWEST_TERRITORY.at(ALBERTA, ALASKA, ONTARIO, GREENLAND);
		ONTARIO.at(NORTHWEST_TERRITORY, ALBERTA, QUEBEC, GREENLAND, EASTERN_UNITED_STATES, WESTERN_UNITED_STATES);
		QUEBEC.at(ONTARIO, EASTERN_UNITED_STATES, GREENLAND);
		WESTERN_UNITED_STATES.at(EASTERN_UNITED_STATES, ALBERTA, ONTARIO, CENTRAL_AMERICA);

		ARGENTINA.at(BRAZIL, PERU);
		BRAZIL.at(PERU, NORTH_AFRICA, VENEZUELA, ARGENTINA);
		PERU.at(ARGENTINA, BRAZIL, VENEZUELA);
		VENEZUELA.at(PERU, BRAZIL, CENTRAL_AMERICA);

		GREAT_BRITAIN.at(ICELAND, SCANDINAVIA, NORTHERN_EUROPE, WESTERN_EUROPE);
		ICELAND.at(GREENLAND, GREAT_BRITAIN, SCANDINAVIA);
		NORTHERN_EUROPE.at(WESTERN_EUROPE, GREAT_BRITAIN, SCANDINAVIA, SOUTHERN_EUROPE, UKRAINE);
		SCANDINAVIA.at(ICELAND, GREAT_BRITAIN, NORTHERN_EUROPE, UKRAINE);
		SOUTHERN_EUROPE.at(WESTERN_EUROPE, NORTH_AFRICA, EGYPT, MIDDLE_EAST, NORTHERN_EUROPE, UKRAINE);
		UKRAINE.at(SOUTHERN_EUROPE, NORTHERN_EUROPE, SCANDINAVIA, MIDDLE_EAST, AFGHANISTAN, URAL);
		WESTERN_EUROPE.at(GREAT_BRITAIN, NORTHERN_EUROPE, SOUTHERN_EUROPE, NORTH_AFRICA);
		
		CONGO.at(NORTH_AFRICA, SOUTH_AFRICA, EAST_AFRICA);
		EAST_AFRICA.at(CONGO, MIDDLE_EAST, EGYPT, MADAGASCAR, NORTH_AFRICA, SOUTH_AFRICA);
		EGYPT.at(EAST_AFRICA, NORTH_AFRICA, MIDDLE_EAST, SOUTHERN_EUROPE);
		MADAGASCAR.at(EAST_AFRICA, SOUTH_AFRICA);
		NORTH_AFRICA.at(WESTERN_EUROPE, SOUTHERN_EUROPE, EGYPT, BRAZIL, EAST_AFRICA, CONGO);
		SOUTH_AFRICA.at(CONGO, EAST_AFRICA, MADAGASCAR);

		AFGHANISTAN.at(UKRAINE, CHINA, INDIA, MIDDLE_EAST, URAL);
		CHINA.at(INDIA, AFGHANISTAN, URAL, SIBERIA, MONGOLIA, SIAM);
		INDIA.at(CHINA, SIAM, MIDDLE_EAST, AFGHANISTAN);
		IRKUTSK.at(SIBERIA, MONGOLIA, YAKUTSK, KAMCHATKA);
		JAPAN.at(KAMCHATKA, MONGOLIA);
		KAMCHATKA.at(ALASKA, JAPAN, MONGOLIA, IRKUTSK, YAKUTSK);
		MIDDLE_EAST.at(SOUTHERN_EUROPE, UKRAINE, AFGHANISTAN, INDIA, EGYPT, EAST_AFRICA);
		MONGOLIA.at(CHINA, JAPAN, SIBERIA, IRKUTSK, KAMCHATKA);
		SIAM.at(INDONESIA, INDIA, CHINA);
		SIBERIA.at(URAL, CHINA, MONGOLIA, IRKUTSK, YAKUTSK);
		URAL.at(UKRAINE, AFGHANISTAN, CHINA, SIBERIA);
		YAKUTSK.at(IRKUTSK, KAMCHATKA, SIBERIA);

		EASTERN_AUSTRALIA.at(NEW_GUINEA, WESTERN_AUSTRALIA);
		INDONESIA.at(NEW_GUINEA, WESTERN_AUSTRALIA, SIAM);
		NEW_GUINEA.at(EASTERN_AUSTRALIA, INDONESIA);
		WESTERN_AUSTRALIA.at(EASTERN_AUSTRALIA, INDONESIA);
	}
	
	private Continent continent;
	private List<Territory> adjacentTerritories;
	
	public List<Territory> getAdjacentTerritories() {
		return adjacentTerritories;
	}

	public static void ensureNoAdjacencyBugs() {
		for (Territory t : Territory.values()) {
			for (Territory adj : t.getAdjacentTerritories()) {
				if (!(adj.getAdjacentTerritories().contains(t))) {
					throw new RuntimeException(adj + " does not contain " + t);
				}
			}
		}
		System.out.println("NO ADJ BUGS");
	}

	/** set adjacent territories */
	private void at(Territory... t) {
		this.adjacentTerritories = Collections.unmodifiableList(Arrays.asList(t));
	}

	private Territory(Continent c) {
		this.continent = c;
		c.addTerritory(this);
	}

	public Continent getContinent() {
		return continent;
	}

	public boolean isAdjacent(Territory territory) {
		return adjacentTerritories.contains(territory);
	}
}
